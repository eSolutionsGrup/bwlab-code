apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: borg-ci-
spec:
  entrypoint: borg-ci
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: longhorn-single-replica
        resources:
          requests:
            storage: 2Gi

  templates:
    - name: borg-ci
      steps:
        - - name: git-clone
            template: git-clone
            arguments:
              parameters:
                - name: repo
                  value: https://github.com/eSolutionsGrup/bwlab-code.git
                - name: git-secret
                  value: github-login

        - - name: build
            template: build
        - - name: docker-push
            template: docker-push
            arguments:
              parameters:
                - name: path
                  value: /
                - name: image
                  value: test:v4

    - name: git-clone
      inputs:
        parameters:
          - name: repo
          - name: git-secret
        artifacts:
          - name: source-code
            path: /root/src
            git:
              repo: "{{inputs.parameters.repo}}"
              revision: "master"
              # do a shallow clone
              depth: 1
              # first create a secret containing the username and github token
              # kubectl create secret generic github-login --from-literal=username=cod-r --from-literal=password=your-token
              usernameSecret:
                name: "{{inputs.parameters.git-secret}}"
                key: username
              passwordSecret:
                name: "{{inputs.parameters.git-secret}}"
                key: password

      container:
        image: alpine/git
        command: [ sh, -c ]
        args: [ "git status && ls -l" ]
        workingDir: /root/src
        volumeMounts:
          - name: workdir
            mountPath: /root

    - name: build
      container:
        image: openjdk:11-jdk-slim
        workingDir: /root/src
        command: [ sh, -c ]
        args: [ "./mvnw clean install" ]
        resources:
          requests:
            memory: 1024Mi
            cpu: 200m
        volumeMounts:
          - name: workdir
            mountPath: /root

    - name: docker-push
      inputs:
        parameters:
          - name: path
          - name: image
      # Mount the configuration so we can push the image.
      # This should create the /.docker/config.json file.
      volumes:
        - name: docker-config
          secret:
            # first create a new secret with docker credentials using the internal k8s nexus service url
            # kubectl create secret docker-registry nexus-internal-url --docker-server=nexus-docker-service.nexus:5000 --docker-username=admin --docker-password=your-pass
            secretName: nexus-internal-url
            items:
              - key: .dockerconfigjson
                path: config.json
      container:
        image: moby/buildkit:v0.9.3-rootless
        volumeMounts:
          - name: workdir
            mountPath: /root
          - name: docker-config
            mountPath: /root/.docker/config.json
            subPath: config.json
        workingDir: /root/src
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
          - name: DOCKER_CONFIG
            value: /root/.docker
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile=.
          - --output
          - type=image,registry.insecure=true,name=nexus-docker-service.nexus:5000/{{inputs.parameters.image}},push=true


